local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Quantium",
   LoadingTitle = "Quantium",
   LoadingSubtitle = "by Wyrizon",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Quantium"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = true, -- Set to true to use the key system
   KeySettings = {
      Title = "Quantium",
      Subtitle = "Key System",
      Note = "Please enter the key to access the GUI",
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"test123"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MainTab = Window:CreateTab("Main", 4483362458)

local Button = MainTab:CreateButton({
   Name = "Enable Hitboxes",
   Callback = function()
       local HEAD_SIZE = 16

       local Players = game:GetService("Players")
       local RunService = game:GetService("RunService")

       local function updateHitboxes()
           for _, player in ipairs(Players:GetPlayers()) do
               if player ~= Players.LocalPlayer then
                   local character = player.Character
                   if character then
                       local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                       if humanoidRootPart then
                           -- Create a table to store the properties
                           local properties = {
                               Size = Vector3.new(HEAD_SIZE, HEAD_SIZE, HEAD_SIZE),
                               Transparency = 0.5,
                               BrickColor = BrickColor.new("Really blue"),
                               Material = Enum.Material.Neon,
                               CanCollide = false
                           }

                           -- Use a loop to set the properties
                           for property, value in pairs(properties) do
                               humanoidRootPart[property] = value
                           end
                       end
                   end
               end
           end
       end

       -- Disconnect the previous connection if it exists
       if _G.hitboxUpdateConnection then
           _G.hitboxUpdateConnection:Disconnect()
       end

       -- Use a more descriptive name for the connection
       _G.hitboxUpdateConnection = RunService.RenderStepped:Connect(updateHitboxes)
   end,
})
