local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Quantium",
   LoadingTitle = "Quantium",
   LoadingSubtitle = "by Wyrizon",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Quantium"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = true, -- Set to true to use the key system
   KeySettings = {
      Title = "Quantium",
      Subtitle = "Key System",
      Note = "Please enter the key to access the GUI",
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"test123"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local MainTab = Window:CreateTab("Main", 4483362458)

local Button = MainTab:CreateButton({
   Name = "Enable Hitboxes",
   Callback = function()
       local HEAD_SIZE = 19

       local Players = game:GetService("Players")
       local RunService = game:GetService("RunService")

       local properties = {
           Size = Vector3.new(HEAD_SIZE, HEAD_SIZE, HEAD_SIZE),
           Transparency = 1,
           BrickColor = BrickColor.new("Really blue"),
           Material = Enum.Material.Neon,
           CanCollide = false
       }

       local function updateHitboxes()
           for _, player in ipairs(Players:GetPlayers()) do
               if player ~= Players.LocalPlayer then
                   local character = player.Character
                   if character then
                       local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                       if humanoidRootPart then
                           for property, value in pairs(properties) do
                               if humanoidRootPart[property] ~= value then
                                   humanoidRootPart[property] = value
                               end
                           end
                       end
                   end
               end
           end
       end

       local hitboxUpdateConnection

       local function onPlayerAdded(player)
           player.CharacterAdded:Connect(function()
               if not hitboxUpdateConnection then
                   hitboxUpdateConnection = RunService.RenderStepped:Connect(updateHitboxes)
               end
           end)
       end

       Players.PlayerAdded:Connect(onPlayerAdded)

       for _, player in ipairs(Players:GetPlayers()) do
           onPlayerAdded(player)
       end

       if #Players:GetPlayers() > 1 then
           hitboxUpdateConnection = RunService.RenderStepped:Connect(updateHitboxes)
       end

       Players.PlayerRemoving:Connect(function(player)
           if player ~= Players.LocalPlayer and #Players:GetPlayers() <= 1 and hitboxUpdateConnection then
               hitboxUpdateConnection:Disconnect()
               hitboxUpdateConnection = nil
           end
       end)
   end,
})
